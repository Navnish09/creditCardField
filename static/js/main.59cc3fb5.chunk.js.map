{"version":3,"sources":["component/Card/Card.module.scss","component/List/List.module.scss","App.module.scss","component/SmallInput/InputBlock.module.scss","component/DeleteIcon/DeleteIcon.module.scss","helpers/constants.js","helpers/helper.js","component/SmallInput/SmallInput.js","component/SubmitButton/SubmitButton.js","component/Card/Card.js","component/DeleteIcon/DeleteIcon.js","component/List/List.js","App.js","index.js"],"names":["module","exports","KEY_NAMES","focusElement","elem","focus","focusNextElement","nextElem","disabled","focusPreviousElement","prevElem","trimAllWhiteSpaces","text","replace","InputBlock","inputRef","hideText","props","type","className","classes","inputBlock","ref","Button","Card","onSubmit","valueLength","blockCount","requiredLength","EMPTY_INPUT_BLOCKS","limit","defaultValue","Array","fill","getEmptyArray","useState","cardNum","setCardNum","validValue","setValidValue","inputsRef","useRef","getRefElem","index","current","submitValue","join","handlePaste","e","preventDefault","value","clipboardData","window","getData","isNaN","chunkedValues","byValue","chunk","trimmedtext","i","j","substr","splitText","inputReach","filter","length","Object","keys","forEach","input","inpIndex","useEffect","cardContainer","fieldContainer","fields","map","data","element","onFocus","handleFocus","onChange","event","inputElem","target","trim","prev","num","handleChange","onKeyDown","key","handleKeyDown","onPaste","note","button","onClick","DeleteIcon","iconWrapper","List","items","onItemDelete","list","item","listItem","App","listItems","setListItems","setItems","useCallback","p","deleteListItem","container","main","cardValue","render","document","querySelector"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,cAAgB,4BAA4B,eAAiB,6BAA6B,KAAO,mB,wBCAnHD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,SAAW,uB,kBCAvDD,EAAOC,QAAU,CAAC,UAAY,uB,oBCA9BD,EAAOC,QAAU,CAAC,WAAa,+B,kBCA/BD,EAAOC,QAAU,CAAC,YAAc,gC,iHCKnBC,EACA,YADAA,EAEH,QCCGC,EAAe,SAACC,GACzBA,EAAKC,OACT,EAGaC,EAAmB,SAACC,GAEzBA,IACYA,EAZXC,UAAW,EAaZL,EAAaI,GAErB,EAIaE,EAAuB,SAACC,GAE7BA,GACAP,EAAaO,EAErB,EA2BaC,EAAqB,SAACC,GAC/B,OAAOA,EAAKC,QAAQ,OAAQ,GAChC,E,gEC9CeC,EATW,SAAH,GAA0C,IAApCC,EAAQ,EAARA,SAAUC,EAAQ,EAARA,SAAaC,EAAK,iBAClDC,EAAOF,EAAW,WAAa,OAGrC,OACC,mCAAOE,KAAMA,EAAMC,UAAWC,IAAQC,WAAYC,IAAKP,GAAcE,GAEvE,E,mBCCeM,EARA,SAAH,GAA0B,IAArBX,EAAI,EAAJA,KAASK,EAAK,iBAC3B,OACI,gDAAQE,UAAU,gBAAmBF,GAAK,aACrCL,IAGb,E,gBC8JeY,EAxJK,SAAH,GAA+D,IAAzDC,EAAQ,EAARA,SAAUC,EAAW,EAAXA,YAAaC,EAAU,EAAVA,WAAYC,EAAc,EAAdA,eACnDC,EHuBsB,SAACC,GAA8B,IAAvBC,EAAY,uDAAG,GAChD,OAAOC,MAAMF,GAAOG,KAAKF,EAC7B,CGzB4BG,CAAcP,GAEzC,EAA8BQ,mBAASN,GAAmB,mBAAnDO,EAAO,KAAEC,EAAU,KAC1B,EAAoCF,oBAAS,GAAM,mBAA5CG,EAAU,KAAEC,EAAa,KAC1BC,EAAYC,iBAAO,CAAC,GAEpBC,EAAa,SAACC,GAAK,OAAKH,EAAUI,QAAQD,EAAO,EAGjDE,EAAc,WACnBpB,EAASW,EAAQU,KAAK,MAGtBT,EAAWR,GAGX1B,EAAauC,EAAW,GACzB,EAyDMK,EAAc,SAACC,EAAGL,GAGvB,GAFAK,EAAEC,iBAEY,IAAVN,EAAJ,CAMA,IAAMO,GAASF,EAAEG,eAAiBC,OAAOD,eAAeE,QAAQ,QAGhE,IAAIC,MAAMJ,GAAV,CAGA,IAAMK,EH7DiB,SAAC3C,EAAM4C,GAI5B,IAHA,IAAIC,EAAQ,GACNC,EAAc/C,EAAmBC,GAE9B+C,EAAI,EAAGC,EAAI,EAAGD,EAAIH,EAASG,IAAKC,GAAKJ,EAC1CC,EAAME,GAAKD,EAAYG,OAAOD,EAAGJ,GAGrC,OAAOC,CACX,CGoDwBK,CAAUZ,EAAOxB,GAOjCqC,EAAcR,EAAcS,QAAO,SAACd,GAAK,OAAKA,CAAK,IAAGe,OAC5D9D,EAAaqC,EAAUI,QAAQmB,EAAW,IAG1CG,OAAOC,KAAK3B,EAAUI,SAASwB,SAAQ,SAACC,EAAOC,GAC1CA,EAAWP,EAAa,GAC3BzD,EAAiBkC,EAAUI,QAAQ0B,EAAW,GAEhD,IAKAjC,EAAWkB,EAvBa,CATD,CAiCxB,EAOA,OALAgB,qBAAU,WACThC,EAAeH,EAAQU,KAAK,IAAImB,SAAWrC,EAC5C,GAAG,CAACQ,EAASR,IAIZ,qBAAKT,UAAWC,IAAQoD,cAAc,SACrC,sBAAKrD,UAAWC,IAAQqD,eAAe,UACtC,sBAAKtD,UAAWC,IAAQsD,OAAO,UAG7BtC,EAAQuC,KAAI,SAACC,EAAMjC,GAAK,OACvB,cAAC,EAAU,CAEVO,MAAO0B,EACP7D,SAAU,SAAC8D,GAAO,OAAKrC,EAAUI,QAAQD,GAASkC,CAAO,EACzDrE,SAAqB,IAAVmC,IAAiBiC,EAE5BE,QAAS,SAAC9B,GAAC,OAlEE,SAACA,EAAGL,GACvB,IAAMjC,EAAWgC,EAAW,CAACC,EAAQ,KAKjCjC,GAAaA,EAASwC,KAC3B,CA2DuB6B,CAAY/B,EAAGL,EAAM,EACrCqC,SAAU,SAAChC,GAAC,OA/GE,SAACiC,EAAOtC,GAC5B,IHJmCvC,EAAM0B,EGInCoD,EAAYD,EAAME,OAClBjC,EAAQgC,EAAUhC,MAAMkC,OAI1B9B,MAAMJ,KHT+BpB,EGYTJ,GHZGtB,EGYd8E,GHXdhC,MAAQ9C,EAAK8C,MAAMW,OAAO,EAAG/B,GGcnCoB,EAAMe,QAAUvC,GAAgBpB,EAAiBoC,EAAW,CAACC,EAAQ,MAGpEO,EAAMe,QAAWxD,EAAqBiC,EAAW,CAACC,EAAQ,KAK3DO,EAAMe,QAAUvC,GAChBW,GAAW,SAAAgD,GAAI,OAAIA,EAAKV,KAAI,SAACW,EAAK3B,GAAC,OAAMA,IAAMhB,EAASO,EAAQoC,CAAG,GAAC,IACtE,CAyFwBC,CAAavC,EAAGL,EAAM,EACvC6C,UAAW,SAACxC,GAAC,OAvFE,SAACA,EAAGL,GACTK,EAAEmC,OAMHjC,OAASF,EAAEyC,MAAQvF,GACjCO,EAAqBiC,EAAW,CAACC,EAAQ,KAItCA,IAAUhB,EAAa,GACtBqB,EAAEyC,MAAQvF,GAAmBoC,GAChCO,GAGH,CAsEyB6C,CAAc1C,EAAGL,EAAM,EACzCgD,QAAS,SAAC3C,GAAC,OAAKD,EAAYC,EAAGL,EAAM,GARhCA,EASJ,IAIJ,mBAAGxB,UAAWC,IAAQwE,KAAK,0CAI5B,qBAAKzE,UAAWC,IAAQyE,OAAO,SAC9B,cAAC,EAAM,CAACjF,KAAK,SAASkF,QAASjD,EAAarC,UAAW8B,IAAc,UAM1E,E,iBC7JeyD,EANW,SAAH,OAAMD,EAAO,EAAPA,QAAO,OAChC,sBAAMA,QAASA,EAAS3E,UAAWC,IAAQ4E,YAAY,SACnD,wCACG,E,gBCYIC,EAbK,SAAH,OAAMC,EAAK,EAALA,MAAOC,EAAY,EAAZA,aAAY,OACzC,oBAAIhF,UAAWC,IAAQgF,KAAK,SAE1BF,EAAMvB,KAAI,SAAC0B,EAAM1D,GAAK,OACrB,qBAA6BxB,UAAWC,IAAQkF,SAAS,UACxD,8BAAMD,IACN,cAAC,EAAU,CAACP,QAAS,kBAAMK,EAAaE,EAAK,MAAI,UAFtCA,EAAI,YAAI1D,GAGf,KAGH,E,iBC8BS4D,EAtCH,WACV,MAAkCpE,mBAAS,IAAG,mBAAvCqE,EAAS,KAAEC,EAAY,KAGxBC,EAAWC,uBAAY,SAACzD,GAC5BuD,GAAa,SAAAG,GAAC,4BAAQA,GAAC,CAAE1D,GAAQ,GACnC,GAAG,IAGG2D,EAAiBF,uBAAY,SAACzD,GAClCuD,GAAa,SAAAG,GAAC,mBAAQA,EAAE5C,QAAO,SAAAqC,GAAI,OAAIA,IAASnD,CAAK,IAAC,GACxD,GAAG,IAOH,OACE,qBAAK/B,UAAWC,IAAQ0F,UAAU,SAChC,sBAAK3F,UAAWC,IAAQ2F,KAAK,UAC3B,cAAC,EAAI,CACHnF,eAAgB,GAChBF,YAAa,EACbC,WAAY,EACZF,SAXa,SAACuF,GACpBN,EAASM,EACX,IAaQR,EAAUvC,OAAS,GACnB,cAAC,EAAI,CAACiC,MAAOM,EAAWL,aAAcU,QAKhD,E,MCnCAI,iBAAO,cAAC,EAAG,IAAKC,SAASC,cAAc,S","file":"static/js/main.59cc3fb5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardContainer\":\"Card_cardContainer__35k1A\",\"fieldContainer\":\"Card_fieldContainer__BgzjO\",\"note\":\"Card_note__3NHgQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"List_list__1KmBX\",\"listItem\":\"List_listItem__H5swp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1Rzl8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputBlock\":\"InputBlock_inputBlock__c8HMk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"iconWrapper\":\"DeleteIcon_iconWrapper__2igQ_\"};","export const VALUE_LIMIT = 4;\r\nexport const INPUTS = 4;\r\nexport const REQUIRED_LENGTH = 16; \r\n\r\nexport const INPUT_NOTE = \"*Only numbers are allowed\";\r\n\r\nexport const KEY_NAMES ={\r\n  Backspace: \"Backspace\",\r\n  Enter : \"Enter\",\r\n}","//==== Optional chaining( ?. ) is used to prevent the TypeError and handle the null value\r\n\r\n\r\n// Enable a field\r\nexport const enableInput = (elem) => {\r\n    elem.disabled = false\r\n}\r\n\r\n// Focus a specific element\r\nexport const focusElement = (elem) => {\r\n    elem.focus();\r\n}\r\n\r\n// Focus next sibling of the element\r\nexport const focusNextElement = (nextElem) => {\r\n    // Check if the next elem is available or not.\r\n    if (nextElem) {\r\n        enableInput(nextElem);\r\n        focusElement(nextElem) // focus next element\r\n    }   \r\n}\r\n\r\n\r\n// Focus previous sibling of the element\r\nexport const focusPreviousElement = (prevElem) => {\r\n     // Check if the previous elem is available or not.\r\n    if (prevElem) {\r\n        focusElement(prevElem) // focus previous element\r\n    }\r\n}\r\n\r\n\r\n// Limit text length to n number\r\nexport const limitInputTextLength = (elem, limit) => {\r\n    elem.value = elem.value.substr(0, limit);\r\n}\r\n\r\n\r\n// Create empty array with n number of empty values\r\nexport const getEmptyArray = (limit, defaultValue = \"\") => {\r\n    return Array(limit).fill(defaultValue);\r\n}\r\n\r\n//Split text into n parts with n length value in each\r\nexport const splitText = (text, byValue) => {\r\n    let chunk = [];\r\n    const trimmedtext = trimAllWhiteSpaces(text);   \r\n\r\n    for (let i = 0, j = 0; i < byValue; i++, j += byValue) {\r\n        chunk[i] = trimmedtext.substr(j, byValue);\r\n    }\r\n    \r\n    return chunk;\r\n} \r\n\r\n//Remove white spaces from text\r\nexport const trimAllWhiteSpaces = (text) => {\r\n    return text.replace(/\\s+/g, '');\r\n}","import React from 'react';\r\nimport classes from './InputBlock.module.scss';\r\n\r\nexport const InputBlock = ({ inputRef, hideText, ...props }) => {\r\n\tconst type = hideText ? \"password\" : \"text\";\r\n\r\n\t\r\n\treturn (\r\n\t\t<input type={type} className={classes.inputBlock} ref={inputRef} {...props} />\r\n\t);\r\n}\r\n\r\nexport default InputBlock;","import React from 'react';\r\nimport './SubmitButton.css';\r\n\r\nconst Button = ({text, ...props}) => {\r\n    return ( \r\n        <button className=\"submitButton\" {...props}>\r\n            {text}\r\n        </button>    \r\n     );\r\n}\r\n \r\nexport default Button;","import { useEffect, useRef, useState } from \"react\";\r\nimport { KEY_NAMES } from \"../../helpers/constants\";\r\nimport {\r\n\tfocusNextElement,\r\n\tfocusPreviousElement,\r\n\tlimitInputTextLength,\r\n\tgetEmptyArray,\r\n\tsplitText,\r\n\tfocusElement,\r\n} from \"../../helpers/helper\";\r\nimport InputBlock from \"../SmallInput/SmallInput\";\r\nimport Button from \"../SubmitButton/SubmitButton\";\r\n\r\nimport classes from \"./Card.module.scss\";\r\n\r\nexport const Card = ({ onSubmit, valueLength, blockCount, requiredLength }) => {\r\n\tconst EMPTY_INPUT_BLOCKS = getEmptyArray(blockCount);\r\n\r\n\tconst [cardNum, setCardNum] = useState(EMPTY_INPUT_BLOCKS);\r\n\tconst [validValue, setValidValue] = useState(false);\r\n\tconst inputsRef = useRef({});\r\n\r\n\tconst getRefElem = (index) => inputsRef.current[index];\r\n\r\n\t// Submit the value \r\n\tconst submitValue = () => {\r\n\t\tonSubmit(cardNum.join(\"-\"));\r\n\t\t\r\n\t\t// Reset input blocks\r\n\t\tsetCardNum(EMPTY_INPUT_BLOCKS);  \r\n\t\t\r\n\t\t// Set focus on the first element. \r\n\t\tfocusElement(getRefElem(0));\r\n\t}\r\n\r\n\r\n\tconst handleChange = (event, index) => {\r\n\t\tconst inputElem = event.target;\r\n\t\tconst value = inputElem.value.trim();\r\n\t\t/**\r\n\t\t * Return if the value is not a number.\r\n\t\t *  */\r\n\t\tif (isNaN(value)) return;\r\n\r\n\t\t// Limit value length to VALUE_LIMIT\r\n\t\tlimitInputTextLength(inputElem, valueLength);\r\n\r\n\t\t// Focus on next element if the length of the value has reached the valueLimit    \r\n\t\t(value.length >= valueLength) && focusNextElement(getRefElem([index + 1]));\r\n\r\n\t\t// Focus on previous element if value is empty    \r\n\t\t(!value.length) && focusPreviousElement(getRefElem([index - 1]), inputElem);\r\n\r\n\t\t/**\r\n\t\t * Set cardnum only if input has reached to valueLimit\r\n\t\t */\r\n\t\t(value.length <= valueLength) &&\r\n\t\t\tsetCardNum(prev => prev.map((num, i) => (i === index) ? value : num))\r\n\t}\r\n\r\n\r\n\tconst handleKeyDown = (e, index) => {\r\n\t\tlet inputElem = e.target;\r\n\r\n\t\t/**\r\n\t\t * Detect Backspace button and set focus to previous input if current is empty \r\n\t\t * (Only usefull if we decide to keep the inputs enabled)\r\n\t\t */\r\n\t\tif (!inputElem.value && e.key === KEY_NAMES.Backspace) {\r\n\t\t\tfocusPreviousElement(getRefElem([index - 1]), inputElem);\r\n\t\t}\r\n\r\n\t\t// Submit value on Enter key press\r\n\t\tif (index === blockCount - 1) {\r\n\t\t\tif (e.key === KEY_NAMES.Enter && validValue) {\r\n\t\t\t\tsubmitValue();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleFocus = (e, index) => {\r\n\t\tconst prevElem = getRefElem([index - 1]);\r\n\t\t/**\r\n\t\t * Prevent user from focusing on the next element before filling the current one\r\n\t\t * (Only usefull if we decide to keep the inputs enabled)\r\n\t\t * */\r\n\t\tif (prevElem && !prevElem.value) return;\r\n\t}\r\n\r\n\r\n\tconst handlePaste = (e, index) => {\r\n\t\te.preventDefault();\r\n\t\t// Allow paste on first field only\r\n\t\tif (index !== 0) return;\r\n\r\n\t\t/**\r\n\t\t * Get copied text from clipboard. \r\n\t\t * (Permission is not required, As clipboard is called inside paste event)\r\n\t\t * */\r\n\t\tconst value = (e.clipboardData || window.clipboardData).getData('Text');\r\n\r\n\t\t// Return if the value is not a number.\r\n\t\tif (isNaN(value)) return;\r\n\r\n\t\t// Get text splitted with each chunck having value length as valueLimit\r\n\t\tconst chunkedValues = splitText(value, valueLength);         \r\n\r\n\t\t/**\r\n\t\t * Using this as loop limit will help us in deciding the input focus\r\n\t\t * For E.g. If paste a value having 8 numbers, The focus will be on 3rd input not\r\n\t\t * on the last one \r\n\t\t *  */\r\n\t\tconst inputReach = (chunkedValues.filter((value) => value)).length;\r\n\t\tfocusElement(inputsRef.current[inputReach-1]);\r\n\r\n\r\n\t\tObject.keys(inputsRef.current).forEach((input, inpIndex) => {\r\n\t\t\tif (inpIndex < inputReach - 1){\r\n\t\t\t\tfocusNextElement(inputsRef.current[inpIndex + 1]);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * Setting values in Cardnum also to keep it in sync with inputs\r\n\t\t */\r\n\t\tsetCardNum(chunkedValues);\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tsetValidValue((cardNum.join(\"\").length === requiredLength));\r\n\t}, [cardNum, requiredLength])\r\n\r\n\r\n\treturn (\r\n\t\t<div className={classes.cardContainer}>\r\n\t\t\t<div className={classes.fieldContainer}>\r\n\t\t\t\t<div className={classes.fields}>\r\n\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcardNum.map((data, index) => (\r\n\t\t\t\t\t\t\t<InputBlock\r\n\t\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\t\tvalue={data}\r\n\t\t\t\t\t\t\t\tinputRef={(element) => inputsRef.current[index] = element}\r\n\t\t\t\t\t\t\t\tdisabled={(index !== 0) && !data}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tonFocus={(e) => handleFocus(e, index)}\r\n\t\t\t\t\t\t\t\tonChange={(e) => handleChange(e, index)}\r\n\t\t\t\t\t\t\t\tonKeyDown={(e) => handleKeyDown(e, index)}\r\n\t\t\t\t\t\t\t\tonPaste={(e) => handlePaste(e, index)}\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\t\t\t<p className={classes.note}>*Only numbers are allowed</p>\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className={classes.button}>\r\n\t\t\t\t\t<Button text=\"Submit\" onClick={submitValue} disabled={!validValue && true} />\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Card;","import classes from './DeleteIcon.module.scss';\r\n\r\nexport const DeleteIcon = ({ onClick }) => (\r\n    <span onClick={onClick} className={classes.iconWrapper}>\r\n        <strong>x</strong>\r\n    </span>\r\n);\r\n\r\nexport default DeleteIcon;","import DeleteIcon from '../DeleteIcon/DeleteIcon';\r\n\r\nimport classes from './List.module.scss';\r\n\r\nexport const List = ({ items, onItemDelete }) => (\r\n\t<ul className={classes.list} >\r\n\t\t{\r\n\t\t\titems.map((item, index) => (\r\n\t\t\t\t<li key={`${item}-${index}`} className={classes.listItem}>\r\n\t\t\t\t\t<div>{item}</div>\r\n\t\t\t\t\t<DeleteIcon onClick={() => onItemDelete(item)} />\r\n\t\t\t\t</li>\r\n\t\t\t))\r\n\t\t}\r\n\t</ul>\r\n);\r\n\r\nexport default List;","import { useCallback, useState } from 'react';\r\nimport Card from './component/Card/Card';\r\nimport List from './component/List/List';\r\n\r\nimport classes from \"./App.module.scss\";\r\n\r\nconst App = () => {\r\n  const [listItems, setListItems] = useState([]);\r\n\r\n  // Set new item to list\r\n  const setItems = useCallback((value) => {\r\n    setListItems(p => [...p, value]);\r\n  }, [])\r\n\r\n  // Delete list itme\r\n  const deleteListItem = useCallback((value) => {\r\n    setListItems(p => [...p.filter(item => item !== value)]);\r\n  }, [])\r\n\r\n\r\n  const handleSubmit = (cardValue) => {\r\n    setItems(cardValue);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <div className={classes.main}>\r\n        <Card\r\n          requiredLength={16}\r\n          valueLength={4}\r\n          blockCount={4}\r\n          onSubmit={handleSubmit}\r\n        />\r\n\r\n        {\r\n          listItems.length > 0 &&\r\n          <List items={listItems} onItemDelete={deleteListItem} />\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default App;","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nimport './index.css';\r\n\r\nrender(<App />, document.querySelector(\"#root\"));"],"sourceRoot":""}